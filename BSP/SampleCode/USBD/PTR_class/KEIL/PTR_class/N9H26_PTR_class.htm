<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\PTR_class\N9H26_PTR_class.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\PTR_class\N9H26_PTR_class.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed Nov 20 11:40:44 2024
<BR><P>
<H3>Maximum Stack Usage =        268 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; sysSetSystemClock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[11]">Vector_Table</a>
 <LI><a href="#[10]">Reset_Go</a>
 <LI><a href="#[5]">Undefined_Handler</a>
 <LI><a href="#[6]">SWI_Handler1</a>
 <LI><a href="#[7]">Prefetch_Handler</a>
 <LI><a href="#[8]">Abort_Handler</a>
 <LI><a href="#[9]">IRQ_Handler</a>
 <LI><a href="#[a]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[21]">sys_flush_and_clean_dcache</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">sys_flush_and_clean_dcache</a><BR>
 <LI><a href="#[5]">Undefined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">Undefined_Handler</a><BR>
 <LI><a href="#[6]">SWI_Handler1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SWI_Handler1</a><BR>
 <LI><a href="#[7]">Prefetch_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">Prefetch_Handler</a><BR>
 <LI><a href="#[8]">Abort_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">Abort_Handler</a><BR>
 <LI><a href="#[9]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">IRQ_Handler</a><BR>
 <LI><a href="#[a]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">Abort_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[2f]">EPA_Handler</a> from ptr.o(.text) referenced from ptr.o(.text)
 <LI><a href="#[a]">FIQ_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[9]">IRQ_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[7]">Prefetch_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[10]">Reset_Go</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[6]">SWI_Handler1</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[5]">Undefined_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[3]">WB_Interrupt_Shell</a> from wb_aic.o(.text) referenced 188 times from wb_aic.o(.data)
 <LI><a href="#[51]">_dramClockSwitch</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[43]">_sysClockSwitch</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[b]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[e]">ptrClassIN</a> from ptr.o(.text) referenced from ptr.o(.text)
 <LI><a href="#[d]">ptrClassOUT</a> from ptr.o(.text) referenced from ptr.o(.text)
 <LI><a href="#[2e]">ptrFullSpeedInit</a> from ptr.o(.text) referenced from ptr.o(.text)
 <LI><a href="#[c]">ptrHighSpeedInit</a> from ptr.o(.text) referenced from ptr.o(.text)
 <LI><a href="#[3c]">sysFiqHandler</a> from wb_aic.o(.text) referenced from wb_aic.o(.text)
 <LI><a href="#[3b]">sysIrqHandler</a> from wb_aic.o(.text) referenced from wb_aic.o(.text)
 <LI><a href="#[f]">sysUartISR</a> from wb_uart.o(.text) referenced from wb_uart.o(.text)
 <LI><a href="#[38]">usbd_isr</a> from usbd.o(.text) referenced from usbd.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[11]"></a>Vector_Table</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[10]"></a>Reset_Go</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Table
</UL>

<P><STRONG><a name="[12]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[13]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[15]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[67]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[68]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[69]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[16]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[6b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[70]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[71]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[72]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[73]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[74]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[75]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[76]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[77]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[78]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[79]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[7f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[80]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[81]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[82]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[84]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[14]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[85]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[17]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[19]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[86]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1b]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[87]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[62]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[1d]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[88]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1f]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[21]"></a>sys_flush_and_clean_dcache</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
</UL>

<P><STRONG><a name="[5c]"></a>sysSetupCP15</STRONG> (ARM, 36 bytes, Stack size 0 bytes, wb_mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[b]"></a>main</STRONG> (ARM, 144 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = main &rArr; sysSetSystemClock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcOpen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcInit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptrInit
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[20]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[89]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__user_initial_stackheap</STRONG> (ARM, 44 bytes, Stack size 32 bytes, standalone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c]"></a>ptrHighSpeedInit</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ptrHighSpeedInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ptr.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>ptrFullSpeedInit</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ptrFullSpeedInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ptr.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>ptrClassOUT</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = ptrClassOUT &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ptr.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>ptrClassIN</STRONG> (ARM, 644 bytes, Stack size 16 bytes, ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = ptrClassIN &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ptr.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>EPA_Handler</STRONG> (ARM, 284 bytes, Stack size 16 bytes, ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EPA_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ptr.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>ptrInit</STRONG> (ARM, 344 bytes, Stack size 8 bytes, ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ptrInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>print_message</STRONG> (ARM, 552 bytes, Stack size 16 bytes, ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = print_message &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>usbdClearAllFlags</STRONG> (ARM, 64 bytes, Stack size 8 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbdClearAllFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_packet
</UL>

<P><STRONG><a name="[29]"></a>udcOpen</STRONG> (ARM, 252 bytes, Stack size 8 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = udcOpen &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>usbd_update_device</STRONG> (ARM, 1348 bytes, Stack size 8 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_update_device
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[36]"></a>usbd_send_descriptor</STRONG> (ARM, 1396 bytes, Stack size 40 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_send_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[37]"></a>usbd_control_packet</STRONG> (ARM, 5048 bytes, Stack size 32 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_control_packet &rArr; usbdClearAllFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbdClearAllFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[38]"></a>usbd_isr</STRONG> (ARM, 3564 bytes, Stack size 32 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usbd_isr &rArr; usbd_control_packet &rArr; usbdClearAllFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_packet
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_send_descriptor
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_update_device
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbdClearAllFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>udcInit</STRONG> (ARM, 340 bytes, Stack size 8 bytes, usbd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udcInit &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>udcDeinit</STRONG> (ARM, 36 bytes, Stack size 0 bytes, usbd.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>udcClose</STRONG> (ARM, 24 bytes, Stack size 0 bytes, usbd.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>udcIsAttached</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usbd.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>udcIsAttachedToHost</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbd.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>udcSetSupendCallBack</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbd.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>udcSetResumeCallBack</STRONG> (ARM, 12 bytes, Stack size 0 bytes, usbd.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>sysIrqHandler</STRONG> (ARM, 308 bytes, Stack size 32 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>sysFiqHandler</STRONG> (ARM, 308 bytes, Stack size 32 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysFiqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>WB_Interrupt_Shell</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>sysInitializeAIC</STRONG> (ARM, 60 bytes, Stack size 8 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
</UL>

<P><STRONG><a name="[31]"></a>sysDisableInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_message
</UL>

<P><STRONG><a name="[32]"></a>sysEnableInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_message
</UL>

<P><STRONG><a name="[90]"></a>sysInstallExceptionHandler</STRONG> (ARM, 136 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>sysInstallFiqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>sysInstallIrqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>sysInstallISR</STRONG> (ARM, 328 bytes, Stack size 24 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
</UL>

<P><STRONG><a name="[93]"></a>sysSetGlobalInterrupt</STRONG> (ARM, 100 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>sysSetInterruptPriorityLevel</STRONG> (ARM, 196 bytes, Stack size 16 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>sysSetInterruptType</STRONG> (ARM, 152 bytes, Stack size 12 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>sysSetLocalInterrupt</STRONG> (ARM, 140 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcInit
</UL>

<P><STRONG><a name="[96]"></a>sysSetAIC2SWMode</STRONG> (ARM, 16 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>sysGetInterruptEnableStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>sysGetInterruptHighEnableStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>sysGetIBitState</STRONG> (ARM, 28 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>sysGetPLLOutputHz</STRONG> (ARM, 164 bytes, Stack size 56 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
</UL>

<P><STRONG><a name="[9a]"></a>sysCheckPllConstraint</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_sysGetPLLControlRegister</STRONG> (ARM, 292 bytes, Stack size 56 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _sysGetPLLControlRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[9b]"></a>sysSetPLLControlRegister</STRONG> (ARM, 40 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_sysClockSwitch</STRONG> (ARM, 344 bytes, Stack size 24 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sysClockSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>_sysClockSwitchStart</STRONG> (ARM, 180 bytes, Stack size 56 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheMode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
</UL>

<P><STRONG><a name="[23]"></a>sysGetExternalClock</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wb_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>sysGetDramClock</STRONG> (ARM, 88 bytes, Stack size 8 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sysGetDramClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
</UL>

<P><STRONG><a name="[49]"></a>sysGetSystemClock</STRONG> (ARM, 200 bytes, Stack size 32 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
</UL>

<P><STRONG><a name="[4a]"></a>sysGetCPUClock</STRONG> (ARM, 48 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sysGetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[26]"></a>sysSetSystemClock</STRONG> (ARM, 1236 bytes, Stack size 72 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = sysSetSystemClock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>sysSetCPUClock</STRONG> (ARM, 144 bytes, Stack size 24 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = sysSetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>sysGetHCLK1Clock</STRONG> (ARM, 48 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = sysGetHCLK1Clock &rArr; sysGetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK234Clock
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
</UL>

<P><STRONG><a name="[4c]"></a>sysSetAPBClock</STRONG> (ARM, 168 bytes, Stack size 16 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[4d]"></a>sysGetHCLK234Clock</STRONG> (ARM, 44 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sysGetHCLK234Clock &rArr; sysGetHCLK1Clock &rArr; sysGetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[4e]"></a>sysGetAPBClock</STRONG> (ARM, 44 bytes, Stack size 16 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
</UL>

<P><STRONG><a name="[4f]"></a>sysSetPllClock</STRONG> (ARM, 400 bytes, Stack size 32 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>

<P><STRONG><a name="[51]"></a>_dramClockSwitch</STRONG> (ARM, 2916 bytes, Stack size 44 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _dramClockSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>_dramClockSwitchStart</STRONG> (ARM, 368 bytes, Stack size 64 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _dramClockSwitchStart &rArr; sysEnableCache &rArr; sysInitMMUTable
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheMode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[25]"></a>sysSetDramClock</STRONG> (ARM, 564 bytes, Stack size 48 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = sysSetDramClock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK234Clock
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>sysUartPort</STRONG> (ARM, 160 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>sysUartInstallcallback</STRONG> (ARM, 76 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>sysUartISR</STRONG> (ARM, 756 bytes, Stack size 24 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysUartISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>sysUartEnableInt</STRONG> (ARM, 148 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>sysInitializeUART</STRONG> (ARM, 528 bytes, Stack size 16 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sysInitializeUART &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBaudRate
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>_PutChar_f</STRONG> (ARM, 440 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[53]"></a>sysPutString</STRONG> (ARM, 40 bytes, Stack size 8 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPutString
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[5a]"></a>sysPrintf</STRONG> (ARM, 204 bytes, Stack size 40 bytes, wb_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>

<P><STRONG><a name="[28]"></a>sysprintf</STRONG> (ARM, 284 bytes, Stack size 40 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptrClassIN
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptrClassOUT
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcOpen
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_message
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>sysGetChar</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>sysPutChar</STRONG> (ARM, 48 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>sysUartTransfer</STRONG> (ARM, 68 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>sysGetSdramSizebyMB</STRONG> (ARM, 408 bytes, Stack size 12 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>sysEnableCache</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysEnableCache &rArr; sysInitMMUTable
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
</UL>

<P><STRONG><a name="[46]"></a>sysDisableCache</STRONG> (ARM, 88 bytes, Stack size 8 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysDisableCache
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
</UL>

<P><STRONG><a name="[3f]"></a>sysFlushCache</STRONG> (ARM, 112 bytes, Stack size 16 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>

<P><STRONG><a name="[a2]"></a>sysInvalidCache</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>sysGetCacheState</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>

<P><STRONG><a name="[45]"></a>sysGetCacheMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
</UL>

<P><STRONG><a name="[a3]"></a>_sysLockCode</STRONG> (ARM, 200 bytes, Stack size 16 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>_sysUnLockCode</STRONG> (ARM, 40 bytes, Stack size 8 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>sysSetMMUMappingMethod</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wb_mmu.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>sysInitMMUTable</STRONG> (ARM, 168 bytes, Stack size 8 bytes, wb_mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysInitMMUTable
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetupCP15
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
</UL>

<P><STRONG><a name="[59]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem (via BLX)
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPA_Handler
</UL>

<P><STRONG><a name="[5d]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[a6]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_uread4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_packet
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_send_descriptor
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_update_device
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcInit
</UL>

<P><STRONG><a name="[a7]"></a>__rt_uread4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_uwrite4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_packet
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_send_descriptor
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_update_device
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbdClearAllFlags
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptrFullSpeedInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptrHighSpeedInit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcOpen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udcInit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptrInit
</UL>

<P><STRONG><a name="[a8]"></a>__rt_uwrite4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ae]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[af]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBaudRate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK234Clock
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5]"></a>Undefined_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[6]"></a>SWI_Handler1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[7]"></a>Prefetch_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[8]"></a>Abort_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[9]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[a]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[52]"></a>sysSetBaudRate</STRONG> (ARM, 56 bytes, Stack size 16 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sysSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
</UL>

<P><STRONG><a name="[55]"></a>sysPutRepChar</STRONG> (ARM, 40 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysPutRepChar
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[56]"></a>sysPutStringReverse</STRONG> (ARM, 40 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[57]"></a>sysPutNumber</STRONG> (ARM, 444 bytes, Stack size 80 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[58]"></a>FormatItem</STRONG> (ARM, 540 bytes, Stack size 40 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[65]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[64]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[63]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[66]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[61]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
